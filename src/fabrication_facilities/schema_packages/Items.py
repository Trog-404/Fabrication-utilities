#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# import datetime
from typing import (
    TYPE_CHECKING,
)

import numpy as np
from nomad.datamodel.data import (
    ArchiveSection,
    EntryData,
)
from nomad.datamodel.metainfo.basesections import Entity
from nomad.datamodel.metainfo.workflow import Link
from nomad.metainfo import (
    MEnum,
    Package,
    Quantity,
    Section,
    SubSection,
)

if TYPE_CHECKING:
    pass

m_package = Package(name='Items plugin')


# In questa parte del plugin non mi piace come si inseriscono le proprietÃ  degli items
# forse sarebbe il caso di definirle una per una
class ItemPropertyDefinition(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln={
            'properties': {
                'order': [
                    'name',
                    'description',
                    'id',
                    'unit',
                    'value',
                ]
            }
        },
    )
    id = Quantity(
        type=int,
        a_eln={'component': 'NumberEditQuantity'},
    )
    name = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    description = Quantity(
        type=str,
        a_eln={'component': 'RichTextEditQuantity'},
    )
    unit = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    value = Quantity(
        type=np.float64,
        a_eln={'component': 'NumberEditQuantity'},
    )


class StringProperties(ItemPropertyDefinition):
    m_def = Section()
    id = Quantity(
        type=int,
        a_eln={'component': 'NumberEditQuantity'},
    )
    name = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    description = Quantity(
        type=str,
        a_eln={'component': 'RichTextEditQuantity'},
    )
    value = Quantity(
        type=np.float64,
        a_eln={'component': 'NumberEditQuantity'},
    )


class NumericProperties(ItemPropertyDefinition):
    m_def = Section()
    id = Quantity(
        type=int,
        a_eln={'component': 'NumberEditQuantity'},
    )
    name = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    description = Quantity(
        type=str,
        a_eln={'component': 'RichTextEditQuantity'},
    )
    unit = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    value = Quantity(
        type=np.float64,
        a_eln={'component': 'NumberEditQuantity'},
    )


class DopingProperties(ItemPropertyDefinition):
    m_def = Section(
        a_eln={'hide': ['unit']},
    )
    id = Quantity(
        type=int,
        a_eln={'component': 'NumberEditQuantity'},
    )
    description = Quantity(
        type=str,
        a_eln={'component': 'RichTextEditQuantity'},
    )
    doping_type = Quantity(
        type=MEnum(
            [
                'p',
                'n',
                'no_doping',
            ]
        ),
        a_eln={'component': 'EnumEditQuantity'},
    )
    value = Quantity(
        type=np.float64,
        a_eln={
            'component': 'NumberEditQuantity',
            'defaultDisplayUnit': 'ppm',
        },
        unit='ppm',
    )


class ItemShapeType(ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln={
            'properties': {
                'order': [
                    'name',
                    'description',
                    'id',
                ]
            }
        },
    )

    id = Quantity(
        type=int,
        a_eln={'component': 'NumberEditQuantity'},
    )
    name = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    description = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )


class ListOfItemPropertyDefinition(EntryData, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln={
            'properties': {
                'order': [
                    'name',
                    'description',
                    'id',
                ]
            }
        },
    )

    name = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    description = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    id = Quantity(
        type=int,
        a_eln={'component': 'NumberEditQuantity'},
    )
    list_of_possible_properties = SubSection(
        section_def=ItemPropertyDefinition,
        repeats=True,
    )
    list_of_items_shape_type = SubSection(
        section_def=ItemShapeType,
        repeats=True,
    )


class StartingMaterial(Entity, ArchiveSection):
    m_def = Section()
    wafer_material = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    manufacturer_name = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    wafer_doping = Quantity(
        type=bool,
        a_eln={'component': 'BoolEditQuantity'},
    )


#    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
#        '''
#        The normalizer for the `StartingMaterial` class.
#
#        Args:
#            archive (EntryArchive): The archive containing the section that is being
#            normalized.
#            logger (BoundLogger): A structlog logger.
#        '''
#        super().normalize(archive, logger)


class Item(Entity, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    id_wafer_parent = Quantity(
        type=int,
        a_eln={'component': 'NumberEditQuantity'},
    )
    itemShapeType = Quantity(
        type=MEnum(
            [
                'Wafer with flat standard',
                'Wafer with flat JEIDA',
                'Rectangle shape',
                '1/2 wafer',
                '1/4 wafer',
                'Fragment',
                'Square shape',
                'Powder',
                'Wafer with Notch standard',
            ]
        ),
        a_eln={'component': 'EnumEditQuantity'},
    )
    properties = SubSection(
        section_def=ItemPropertyDefinition,
        repeats=True,
    )


#    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
#        '''
#        The normalizer for the `Item` class.
#
#        Args:
#            archive (EntryArchive): The archive containing the section that is being
#            normalized.
#            logger (BoundLogger): A structlog logger.
#        '''
#        super().normalize(archive, logger)


class SampleParenting(Entity, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    #    m_def = Section()
    #    date = Quantity(
    #        type=datetime,
    #        a_eln={
    #            "component": "DateTimeEditQuantity"
    #        },
    #    )
    inputs = SubSection(
        section_def=StartingMaterial,
        repeats=True,
    )
    outputs = SubSection(
        section_def=Item,
        repeats=True,
    )


#    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
#        '''
#        The normalizer for the `Sample_parenting` class.
#
#        Args:
#            archive (EntryArchive): The archive containing the section that is being
#            normalized.
#            logger (BoundLogger): A structlog logger.
#        '''
#        super().normalize(archive, logger)


class SampleParentingLink(Link, ArchiveSection):
    m_def = Section()

    Section = Quantity(
        type=SampleParenting,
        a_eln={'component': 'ReferenceEditQuantity'},
    )


m_package.__init_metainfo__()
